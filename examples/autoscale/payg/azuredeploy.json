{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "2.9.0.0",
  "parameters": {
    "templateBaseUrl": {
      "defaultValue": "https://cdn.f5.com/product/cloudsolutions/",
      "metadata": {
        "description": "The publicly accessible URL where the linked ARM templates are located."
      },
      "type": "string"
    },
    "allowUsageAnalytics": {
      "defaultValue": true,
      "metadata": {
        "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **false** statistics are not sent."
      },
      "type": "bool"
    },
    "artifactLocation": {
      "defaultValue": "[concat('f5-azure-arm-templates-v2/v', deployment().properties.template.contentVersion, '/examples/')]",
      "metadata": {
        "description": "The directory, relative to the templateBaseUrl, where the modules folder is located."
      },
      "type": "string"
    },
    "uniqueString": {
      "metadata": {
        "description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
      },
      "type": "string"
    },
    "sshKey": {
      "metadata": {
        "description": "REQUIRED - Supply the public key that will be used for SSH authentication to the BIG-IP and application virtual machines."
      },
      "type": "string"
    },
    "restrictedSrcAddressMgmt": {
      "metadata": {
        "description": "REQUIRED - When creating management security group, this field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources."
      },
      "type": "string"
    },
    "restrictedSrcAddressApp": {
      "metadata": {
        "description": "REQUIRED - When creating application security group, this field restricts application access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources."
      },
      "type": "string"
    },
    "bigIpImage": {
      "defaultValue": "f5-networks:f5-big-ip-best:f5-big-best-plus-hourly-25mbps:16.1.303000",
      "metadata": {
        "description": "2 formats accepted. URN of the image to use in Azure marketplace or id of custom image. Example URN value: f5-networks:f5-big-ip-byol:f5-big-all-2slot-byol:16.1.303000. You can find the URNs of F5 marketplace images in the README for this template or by running the command: az vm image list --output yaml --publisher f5-networks --all. See https://clouddocs.f5.com/cloud/public/v1/azure/Azure_download.html for information on creating custom BIG-IP image."
      },
      "type": "string"
    },
    "bigIpInstanceType": {
      "defaultValue": "Standard_D2s_v4",
      "metadata": {
        "description": "Enter valid instance type."
      },
      "type": "string"
    },
    "bigIpRuntimeInitConfig": {
      "defaultValue": "https://raw.githubusercontent.com/F5Networks/f5-azure-arm-templates-v2/v2.9.0.0/examples/autoscale/bigip-configurations/runtime-init-conf-payg-with-app.yaml",
      "metadata": {
        "description": "Supply a URL to the bigip-runtime-init configuration file in YAML or JSON format, or an escaped JSON string to use for f5-bigip-runtime-init configuration."
      },
      "type": "string"
    },
    "bigIpRuntimeInitPackageUrl": {
      "defaultValue": "https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.6.2/dist/f5-bigip-runtime-init-1.6.2-1.gz.run",
      "metadata": {
        "description": "URL for BIG-IP Runtime Init package"
      },
      "type": "string"
    },
    "bigIpMaxBatchInstancePercent": {
      "defaultValue": 20,
      "maxValue": 100,
      "metadata": {
        "description": "The maximum percentage of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch."
      },
      "minValue": 1,
      "type": "int"
    },
    "bigIpMaxUnhealthyInstancePercent": {
      "defaultValue": 20,
      "maxValue": 100,
      "metadata": {
        "description": "The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy."
      },
      "minValue": 1,
      "type": "int"
    },
    "bigIpMaxUnhealthyUpgradedInstancePercent": {
      "defaultValue": 20,
      "maxValue": 100,
      "metadata": {
        "description": "The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state."
      },
      "minValue": 1,
      "type": "int"
    },
    "bigIpPauseTimeBetweenBatches": {
      "defaultValue": 0,
      "maxValue": 120,
      "metadata": {
        "description": "The wait time between completing the update for all virtual machines in one batch and starting the next batch."
      },
      "minValue": 0,
      "type": "int"
    },
    "bigIpScalingMinSize": {
      "defaultValue": 1,
      "metadata": {
        "description": "Minimum number of BIG-IP instances (1-99) you want available in the Auto Scale Group."
      },
      "minValue": 1,
      "maxValue": 99,
      "type": "int"
    },
    "bigIpScalingMaxSize": {
      "defaultValue": 10,
      "metadata": {
        "description": "Maximum number of BIG-IP instances (2-100) that can be created in the Auto Scale Group."
      },
      "minValue": 2,
      "maxValue": 100,
      "type": "int"
    },
    "bigIpScaleInCpuThreshold": {
      "defaultValue": 20,
      "maxValue": 100,
      "metadata": {
        "description": "The percentage of CPU utilization that should trigger a scale in event."
      },
      "minValue": 1,
      "type": "int"
    },
    "bigIpScaleInThroughputThreshold": {
      "defaultValue": 10000000,
      "metadata": {
        "description": "The amount of throughput (**bytes**) that should trigger a scale in event. Note: The default value is equal to 10 MB."
      },
      "type": "int"
    },
    "bigIpScaleInTimeWindow": {
      "defaultValue": 10,
      "metadata": {
        "description": "The time window required to trigger a scale in event. This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping). **Note:** Allowed values are 1-60 (minutes)."
      },
      "minValue": 1,
      "maxValue": 60,
      "type": "int"
    },
    "bigIpScaleOutCpuThreshold": {
      "defaultValue": 80,
      "maxValue": 100,
      "metadata": {
        "description": "The percentage of CPU utilization that should trigger a scale out event."
      },
      "minValue": 1,
      "type": "int"
    },
    "bigIpScaleOutThroughputThreshold": {
      "defaultValue": 20000000,
      "metadata": {
        "description": "The amount of throughput (**bytes**) that should trigger a scale out event. Note: The default value is equal to 20 MB."
      },
      "type": "int"
    },
    "bigIpScaleOutTimeWindow": {
      "defaultValue": 10,
      "metadata": {
        "description": "The time window required to trigger a scale out event. This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping). **Note:** Allowed values are 1-60 (minutes)."
      },
      "minValue": 1,
      "maxValue": 60,
      "type": "int"
    },
    "provisionExternalBigIpLoadBalancer": {
      "defaultValue": true,
      "metadata": {
        "description": "Select true if you would like to provision an external Azure load balancer."
      },
      "type": "bool"
    },
    "provisionInternalBigIpLoadBalancer": {
      "defaultValue": false,
      "metadata": {
        "description": "Select true if you would like to provision an internal Azure load balancer."
      },
      "type": "bool"
    },
    "provisionPublicIp": {
      "defaultValue": true,
      "metadata": {
        "description": "Select true if you would like to provision a public IP address for accessing the BIG-IP instance(s)."
      },
      "type": "bool"
    },
    "useAvailabilityZones": {
      "defaultValue": false,
      "metadata": {
        "description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set false. If the region does not support availability zones the input should be set to false."
      },
      "type": "bool"
    },
    "bigIpUserAssignManagedIdentity": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter user assigned management identity ID to be associated to vmss. Leave default if not used."
      },
      "type": "string"
    },
    "createWorkspace": {
      "defaultValue": true,
      "metadata": {
        "description": "This deployment will create a workspace and workbook as part of the Telemetry module, intended for enabling Remote Logging using Azure Log Workspace."
      },
      "type": "bool"
    },
    "workspaceId": {
      "metadata": {
        "description": "Log Analytics workspace ID used by Telemetry Streaming for sending logs"
      },
      "type": "string",
      "defaultValue": "WORKSPACE_ID"
    },
    "appContainerName": {
      "defaultValue": "f5devcentral/f5-demo-app:latest",
      "metadata": {
        "description": "The docker container to use when deploying the example application."
      },
      "type": "string"
    },
    "appScalingMinSize": {
      "defaultValue": 1,
      "metadata": {
        "description": "Minimum number of Application instances (1-99) you want available in the Auto Scale Group."
      },
      "minValue": 1,
      "maxValue": 99,
      "type": "int"
    },
    "appScalingMaxSize": {
      "defaultValue": 10,
      "metadata": {
        "description": "Maximum number of Application instances (2-100) that can be created in the Auto Scale Group."
      },
      "minValue": 2,
      "maxValue": 100,
      "type": "int"
    },
    "tagValues": {
      "defaultValue": {
        "application": "f5demoapp",
        "cost": "f5cost",
        "environment": "f5env",
        "group": "f5group",
        "owner": "f5owner"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    }
  },
  "variables": {
    "contentVersion": "[deployment().properties.template.contentVersion]",
    "uniqueString": "[toLower(parameters('uniqueString'))]",
    "adminUsername": "[string('azureuser')]",
    "createManagedIdentity": "[empty(parameters('bigIpUserAssignManagedIdentity'))]",
    "solutionType": "standard",
    "customAssignableScopes": [],
    "customRolePermissions": [],
    "roleDescription": "Role created by autoscale deployment",
    "roleName": "[concat(variables('uniqueString'), '-bigip-autoscale-role')]",
    "keyVaultPermissionsKeys": [],
    "keyVaultPermissionsSecrets": [],
    "userAssignedIdentityName": "[concat(variables('uniqueString'), '-bigip-identity')]",
    "createNatGateway": "[and(not(parameters('provisionPublicIp')), not(variables('provisionExternalBigIpLoadBalancer')))]",
    "numSubnets": 2,
    "vnetAddressPrefix": "10.0",
    "vnetName": "[concat(variables('uniqueString'), '-vnet')]",
    "provisionExternalBigIpLoadBalancer": "[parameters('provisionExternalBigIpLoadBalancer')]",
    "provisionInternalBigIpLoadBalancer": "[parameters('provisionInternalBigIpLoadBalancer')]",
    "externalLoadBalancerName": "[if(variables('provisionExternalBigIpLoadBalancer'), concat(variables('uniqueString'), '-external-lb'), '')]",
    "internalLoadBalancerName": "[if(variables('provisionInternalBigIpLoadBalancer'), concat(variables('uniqueString'), '-internal-lb'), '')]",
    "loadBalancerRulePorts": [
      "80",
      "443"
    ],
    "mgmtSecurityGroup": [
      {
        "destinationPortRanges": [
          "22",
          "8443"
        ],
        "sourceAddressPrefix": "[parameters('restrictedSrcAddressMgmt')]",
        "protocol": "Tcp"
      },
      {
        "destinationPortRanges": [
          "80",
          "443"
        ],
        "sourceAddressPrefix": "*",
        "protocol": "Tcp"
      }
    ],
    "appSecurityGroup": [
      {
        "destinationPortRanges": [
          "80",
          "443"
        ],
        "sourceAddressPrefix": "[parameters('restrictedSrcAddressApp')]",
        "protocol": "Tcp"
      },
      {
        "destinationPortRanges": [
          "80",
          "443"
        ],
        "sourceAddressPrefix": "10.0.0.0/8",
        "protocol": "Tcp"
      }
    ],
    "bastionSecurityGroup": [
      {
        "destinationPortRanges": [
          "22"
        ],
        "sourceAddressPrefix": "[parameters('restrictedSrcAddressMgmt')]",
        "protocol": "Tcp"
      }
    ],
    "numberPublicExternalIpAddresses": "[if(variables('provisionExternalBigIpLoadBalancer'), 1, 0)]",
    "numberPublicMgmtIpAddresses": 0,
    "bastionInstanceName": "[variables('uniqueString')]",
    "bastionInstanceType": "Standard_D2_v4",
    "appInstanceName": "[variables('uniqueString')]",
    "appInstanceType": "Standard_D2_v4",
    "appVmScaleSetMaxCount": "[parameters('appScalingMaxSize')]",
    "appVmScaleSetMinCount": "[parameters('appScalingMinSize')]",
    "cloudInitUrl": "",
    "createAutoscaleGroup": true,
    "provisionApp": "[not(empty(parameters('appContainerName')))]",
    "appInsights": "[concat(variables('uniqueString'), '-app-insights')]",
    "appInsightsId": "[resourceId('Microsoft.Insights/components', variables('appInsights'))]",
    "bigIpImage": "[parameters('bigIpImage')]",
    "bigIpInstanceType": "[parameters('bigIpInstanceType')]",
    "bigIpVmScaleSetMaxCount": "[parameters('bigIpScalingMaxSize')]",
    "bigIpVmScaleSetMinCount": "[parameters('bigIpScalingMinSize')]",
    "cpuMetricName": "Percentage CPU",
    "customAutoscaleRules": [
      {
        "scaleAction": {
          "direction": "Increase",
          "type": "ChangeCount",
          "value": "1",
          "cooldown": "PT1M"
        },
        "metricTrigger": {
          "metricName": "F5_system_cpu",
          "metricNamespace": "azure.applicationinsights",
          "metricResourceUri": "[variables('appInsightsId')]",
          "operator": "GreaterThan",
          "statistic": "Average",
          "threshold": "[variables('scaleOutCpuThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[concat('PT', parameters('bigIpScaleOutTimeWindow'), 'M')]",
          "Dimensions": [],
          "dividePerInstance": false
        }
      },
      {
        "scaleAction": {
          "direction": "Decrease",
          "type": "ChangeCount",
          "value": "1",
          "cooldown": "PT1M"
        },
        "metricTrigger": {
          "metricName": "F5_system_cpu",
          "metricNamespace": "azure.applicationinsights",
          "metricResourceUri": "[variables('appInsightsId')]",
          "operator": "LessThan",
          "statistic": "Average",
          "threshold": "[variables('scaleInCpuThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[concat('PT', parameters('bigIpScaleInTimeWindow'), 'M')]",
          "Dimensions": [],
          "dividePerInstance": false
        }
      },
      {
        "scaleAction": {
          "direction": "Increase",
          "type": "ChangeCount",
          "value": "1",
          "cooldown": "PT1M"
        },
        "metricTrigger": {
          "metricName": "F5_throughputIn_sys/performance/throughput/In_Current",
          "metricNamespace": "azure.applicationinsights",
          "metricResourceUri": "[variables('appInsightsId')]",
          "operator": "GreaterThan",
          "statistic": "Average",
          "threshold": "[variables('scaleOutThroughputThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[concat('PT', parameters('bigIpScaleOutTimeWindow'), 'M')]",
          "Dimensions": [],
          "dividePerInstance": false
        }
      },
      {
        "scaleAction": {
          "direction": "Decrease",
          "type": "ChangeCount",
          "value": "1",
          "cooldown": "PT1M"
        },
        "metricTrigger": {
          "metricName": "F5_throughputIn_sys/performance/throughput/In_Current",
          "metricNamespace": "azure.applicationinsights",
          "metricResourceUri": "[variables('appInsightsId')]",
          "operator": "LessThan",
          "statistic": "Average",
          "threshold": "[variables('scaleInThroughputThreshold')]",
          "timeAggregation": "Average",
          "timeGrain": "PT1M",
          "timeWindow": "[concat('PT', parameters('bigIpScaleInTimeWindow'), 'M')]",
          "Dimensions": [],
          "dividePerInstance": false
        }
      }
    ],
    "customEmail": [],
    "maxBatchInstancePercent": "[parameters('bigIpMaxBatchInstancePercent')]",
    "maxUnhealthyInstancePercent": "[parameters('bigIpMaxUnhealthyInstancePercent')]",
    "maxUnhealthyUpgradedInstancePercent": "[parameters('bigIpMaxUnhealthyUpgradedInstancePercent')]",
    "pauseTimeBetweenBatches": "[parameters('bigIpPauseTimeBetweenBatches')]",
    "publicIpConfig": {
      "name": "[concat(variables('uniqueString'), '-bigip-vmss-pip')]",
      "properties": {
        "idleTimeoutInMinutes": 15
      }
    },
    "scaleInCpuThreshold": "[parameters('bigIpScaleInCpuThreshold')]",
    "scaleInThroughputThreshold": "[parameters('bigIpScaleInThroughputThreshold')]",
    "scaleInTimeWindow": "[parameters('bigIpScaleInTimeWindow')]",
    "scaleOutCpuThreshold": "[parameters('bigIpScaleOutCpuThreshold')]",
    "scaleOutThroughputThreshold": "[parameters('bigIpScaleOutThroughputThreshold')]",
    "scaleOutTimeWindow": "[parameters('bigIpScaleOutTimeWindow')]",
    "throughputMetricName": "Network In",
    "vmssName": "[concat(variables('uniqueString'), '-bigip-vmss')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "condition": "[parameters('createWorkspace')]",
      "name": "telemetryTemplate",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/telemetry/telemetry.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "condition": "[variables('createManagedIdentity')]",
      "name": "accessTemplate",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/access/access.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "solutionType": {
            "value": "[variables('solutionType')]"
          },
          "customAssignableScopes": {
            "value": "[variables('customAssignableScopes')]"
          },
          "roleDescription": {
            "value": "[variables('roleDescription')]"
          },
          "roleName": {
            "value": "[variables('roleName')]"
          },
          "customRolePermissions": {
            "value": "[variables('customRolePermissions')]"
          },
          "keyVaultPermissionsKeys": {
            "value": "[variables('keyVaultPermissionsKeys')]"
          },
          "keyVaultPermissionsSecrets": {
            "value": "[variables('keyVaultPermissionsSecrets')]"
          },
          "userAssignedIdentityName": {
            "value": "[variables('userAssignedIdentityName')]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "networkTemplate",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/network/network.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "createNatGateway": {
            "value": "[variables('createNatGateway')]"
          },
          "numSubnets": {
            "value": "[variables('numSubnets')]"
          },
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[variables('vnetAddressPrefix')]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "dagTemplate",
      "dependsOn": [
        "networkTemplate"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/dag/dag.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "externalLoadBalancerName": {
            "value": "[if(variables('provisionExternalBigIpLoadBalancer'), variables('externalLoadBalancerName'), 'None')]"
          },
          "internalLoadBalancerName": {
            "value": "[if(variables('provisionInternalBigIpLoadBalancer'), variables('internalLoadBalancerName'), 'None')]"
          },
          "internalSubnetId": {
            "value": "[reference('networkTemplate').outputs.subnets.value[1]]"
          },
          "loadBalancerRulePorts": {
            "value": "[variables('loadBalancerRulePorts')]"
          },
          "nsg0": {
            "value": "[variables('mgmtSecurityGroup')]"
          },
          "nsg1": {
            "value": "[variables('appSecurityGroup')]"
          },
          "nsg2": {
            "value": "[if(parameters('provisionPublicIp'), createArray(), variables('bastionSecurityGroup'))]"
          },
          "numberPublicExternalIpAddresses": {
            "value": "[variables('numberPublicExternalIpAddresses')]"
          },
          "numberPublicMgmtIpAddresses": {
            "value": "[variables('numberPublicMgmtIpAddresses')]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "condition": "[not(parameters('provisionPublicIp'))]",
      "name": "bastionTemplate",
      "dependsOn": [
        "bigIpTemplate"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/bastion/bastion.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "adminUsername": {
            "value": "[variables('adminUsername')]"
          },
          "createAutoscaleGroup": {
            "value": "[variables('createAutoscaleGroup')]"
          },
          "instanceName": {
            "value": "[variables('bastionInstanceName')]"
          },
          "instanceType": {
            "value": "[variables('bastionInstanceType')]"
          },
          "nsgId": {
            "value": "[reference('dagTemplate').outputs.nsg2Id.value]"
          },
          "sshKey": {
            "value": "[parameters('sshKey')]"
          },
          "subnetId": {
            "value": "[reference('networkTemplate').outputs.subnets.value[1]]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('provisionApp')]",
      "apiVersion": "2021-04-01",
      "name": "appTemplate",
      "dependsOn": [
        "networkTemplate",
        "dagTemplate"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/application/application.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "adminUsername": {
            "value": "[variables('adminUsername')]"
          },
          "appContainerName": {
            "value": "[parameters('appContainerName')]"
          },
          "cloudInitUrl": {
            "value": "[variables('cloudInitUrl')]"
          },
          "createAutoscaleGroup": {
            "value": "[variables('createAutoscaleGroup')]"
          },
          "instanceName": {
            "value": "[variables('appInstanceName')]"
          },
          "instanceType": {
            "value": "[variables('appInstanceType')]"
          },
          "nsgId": {
            "value": "[reference('dagTemplate').outputs.nsg1Id.value]"
          },
          "sshKey": {
            "value": "[parameters('sshKey')]"
          },
          "subnetId": {
            "value": "[reference('networkTemplate').outputs.subnets.value[1]]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          },
          "vmScaleSetMaxCount": {
            "value": "[variables('appVmScaleSetMaxCount')]"
          },
          "vmScaleSetMinCount": {
            "value": "[variables('appVmScaleSetMinCount')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "bigIpTemplate",
      "dependsOn": [
        "accessTemplate",
        "networkTemplate",
        "dagTemplate",
        "telemetryTemplate"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/bigip-autoscale/bigip.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "adminUsername": {
            "value": "[variables('adminUsername')]"
          },
          "allowUsageAnalytics": {
            "value": "[parameters('allowUsageAnalytics')]"
          },
          "appInsights": {
            "value": "[variables('appInsights')]"
          },
          "cpuMetricName": {
            "value": "[variables('cpuMetricName')]"
          },
          "customAutoscaleRules": {
            "value": "[variables('customAutoscaleRules')]"
          },
          "customEmail": {
            "value": "[variables('customEmail')]"
          },
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "image": {
            "value": "[variables('bigIpImage')]"
          },
          "inboundMgmtNatPoolId": {
            "value": "[if(and(variables('provisionExternalBigIpLoadBalancer'), greater(variables('numberPublicMgmtIpAddresses'), 0)), reference('dagTemplate').outputs.inboundMgmtNatPool.value, '')]"
          },
          "inboundSshNatPoolId": {
            "value": "[if(and(variables('provisionExternalBigIpLoadBalancer'), greater(variables('numberPublicMgmtIpAddresses'), 0)), reference('dagTemplate').outputs.inboundSshNatPool.value, '')]"
          },
          "instanceHealthProbeId": {
            "value": "[if(variables('provisionExternalBigIpLoadBalancer'), reference('dagTemplate').outputs.externalLoadBalancerProbesId.value[0], if(variables('provisionInternalBigIpLoadBalancer'), reference('dagTemplate').outputs.internalLoadBalancerProbesId.value[0], ''))]"
          },
          "instanceType": {
            "value": "[variables('bigIpInstanceType')]"
          },
          "loadBalancerBackendAddressPoolsArray": {
            "value": "[if(variables('provisionExternalBigIpLoadBalancer'), if(variables('provisionInternalBigIpLoadBalancer'), createArray(createObject('id', reference('dagTemplate').outputs.externalBackEndLoadBalancerId.value), createObject('id', reference('dagTemplate').outputs.internalBackEndLoadBalancerId.value)), createArray(createObject('id', reference('dagTemplate').outputs.externalBackEndLoadBalancerId.value))), if(variables('provisionInternalBigIpLoadBalancer'), createArray(createObject('id', reference('dagTemplate').outputs.internalBackEndLoadBalancerId.value)), createArray()))]"
          },
          "nsgId": {
            "value": "[reference('dagTemplate').outputs.nsg0Id.value]"
          },
          "provisionPublicIp": {
            "value": "[if(parameters('provisionPublicIp'), variables('publicIpConfig'), createObject())]"
          },
          "roleDefinitionId": {
            "value": ""
          },
          "bigIpRuntimeInitConfig": {
            "value": "[parameters('bigIpRuntimeInitConfig')]"
          },
          "bigIpRuntimeInitPackageUrl": {
            "value": "[parameters('bigIpRuntimeInitPackageUrl')]"
          },
          "maxBatchInstancePercent": {
            "value": "[variables('maxBatchInstancePercent')]"
          },
          "maxUnhealthyInstancePercent": {
            "value": "[variables('maxUnhealthyInstancePercent')]"
          },
          "maxUnhealthyUpgradedInstancePercent": {
            "value": "[variables('maxUnhealthyUpgradedInstancePercent')]"
          },
          "pauseTimeBetweenBatches": {
            "value": "[variables('pauseTimeBetweenBatches')]"
          },
          "scaleInCpuThreshold": {
            "value": "[variables('scaleInCpuThreshold')]"
          },
          "scaleInThroughputThreshold": {
            "value": "[variables('scaleInThroughputThreshold')]"
          },
          "scaleInTimeWindow": {
            "value": "[variables('scaleInTimeWindow')]"
          },
          "scaleOutCpuThreshold": {
            "value": "[variables('scaleOutCpuThreshold')]"
          },
          "scaleOutThroughputThreshold": {
            "value": "[variables('scaleOutThroughputThreshold')]"
          },
          "scaleOutTimeWindow": {
            "value": "[variables('scaleOutTimeWindow')]"
          },
          "sshKey": {
            "value": "[parameters('sshKey')]"
          },
          "subnetId": {
            "value": "[reference('networkTemplate').outputs.subnets.value[0]]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          },
          "throughputMetricName": {
            "value": "[variables('throughputMetricName')]"
          },
          "useAvailabilityZones": {
            "value": "[parameters('useAvailabilityZones')]"
          },
          "userAssignManagedIdentity": {
            "value": "[if(not(variables('createManagedIdentity')), parameters('bigIpUserAssignManagedIdentity'), reference('accessTemplate').outputs.userAssignedIdentityId.value)]"
          },
          "vmScaleSetMaxCount": {
            "value": "[variables('bigIpVmScaleSetMaxCount')]"
          },
          "vmScaleSetMinCount": {
            "value": "[variables('bigIpVmScaleSetMinCount')]"
          },
          "vmssName": {
            "value": "[variables('vmssName')]"
          },
          "workspaceId": {
            "value": "[if(parameters('createWorkspace'), reference('telemetryTemplate').outputs.workspaceId.value, parameters('workspaceId'))]"
          }
        }
      }
    }
  ],
  "outputs": {
    "appUsername": {
      "condition": "[variables('provisionApp')]",
      "type": "string",
      "value": "[variables('adminUsername')]"
    },
    "appVmssId": {
      "condition": "[variables('provisionApp')]",
      "type": "string",
      "value": "[reference('appTemplate').outputs.vmssId.value]"
    },
    "appVmssName": {
      "condition": "[variables('provisionApp')]",
      "type": "string",
      "value": "[reference('appTemplate').outputs.vmssName.value]"
    },
    "bastionVmssId": {
      "condition": "[not(parameters('provisionPublicIp'))]",
      "type": "string",
      "value": "[reference('bastionTemplate').outputs.vmssId.value]"
    },
    "bastionVmssName": {
      "condition": "[not(parameters('provisionPublicIp'))]",
      "type": "string",
      "value": "[reference('bastionTemplate').outputs.vmssName.value]"
    },
    "bigIpUsername": {
      "type": "string",
      "value": "[variables('adminUsername')]"
    },
    "bigIpVmssId": {
      "type": "string",
      "value": "[reference('bigIpTemplate').outputs.vmssId.value]"
    },
    "bigIpVmssName": {
      "type": "string",
      "value": "[reference('bigIpTemplate').outputs.vmssName.value]"
    },
    "virtualNetworkId": {
      "type": "string",
      "value": "[reference('networkTemplate').outputs.virtualNetwork.value]"
    },
    "wafPublicIps": {
      "condition": "[and(variables('provisionApp'), variables('provisionExternalBigIpLoadBalancer'))]",
      "type": "array",
      "value": "[reference('dagTemplate').outputs.externalIps.value]"
    },
    "wafPrivateIp": {
      "condition": "[and(variables('provisionApp'), variables('provisionInternalBigIpLoadBalancer'))]",
      "type": "string",
      "value": "[reference('dagTemplate').outputs.internalFrontEndLoadBalancerIp.value]"
    }
  }
}
