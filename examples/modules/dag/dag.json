{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "2.9.0.0",
    "parameters": {
        "uniqueString": {
            "metadata": {
                "description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
            },
            "type": "string"
        },
        "externalLoadBalancerName": {
            "defaultValue": "None",
            "metadata": {
                "description": "Valid values include 'None', or an external load balancer name. A value of 'None' will not create external load balancer. Specifying a name creates a external load balancer with the name specified."
            },
            "type": "string"
        },
        "internalLoadBalancerName": {
            "defaultValue": "None",
            "metadata": {
                "description": "Valid values include 'None', or an internal load balancer name. A value of 'None' will not create internal load balancer. Specifying a name creates a internal load balancer with the name specified."
            },
            "type": "string"
        },
        "internalSubnetId": {
            "defaultValue": "",
            "metadata": {
                "description": "Enter subnet id to use for frontend internal load balancer configuration. If you specified None for provision internal load balancer, this setting has no effect."
            },
            "type": "string"
        },
        "loadBalancerRulePorts": {
            "defaultValue": [
                "80",
                "443"
            ],
            "metadata": {
                "description": "Valid values include valid tcp ports. Enter an array of ports your applications use. Example: '[80,443,445]'"
            },
            "type": "array"
        },
        "nsg0": {
            "defaultValue": [
                {
                    "destinationPortRanges": ["22","8443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                },
                {
                    "destinationPortRanges": ["80","443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg1": {
            "defaultValue": [
                {
                    "destinationPortRanges": ["80","443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg2": {
            "defaultValue": [
                {
                    "destinationPortRanges": ["80","443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg3": {
            "defaultValue": [],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg4": {
            "defaultValue": [],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "numberPublicExternalIpAddresses": {
            "defaultValue": 1,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "metadata": {
                "description": "Enter the number of public external ip address to create. At least one is required to build ELB."
            },
            "type": "int"
        },
        "numberPublicMgmtIpAddresses": {
            "defaultValue": 0,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "metadata": {
                "description": "Enter the number of public mgmt ip addresses to create."
            },
            "type": "int"
        },
        "tagValues": {
            "defaultValue": {
                "application": "f5demoapp",
                "cost": "f5cost",
                "environment": "f5env",
                "group": "f5group",
                "owner": "f5owner"
            },
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            },
            "type": "object"
        }
    },
    "variables": {
        "appLoadBalancerFrontEnd": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), variables('constructFrontEndIPConfigID'), union(variables('constructFrontEndIPConfigID'), variables('mgmtLoadBalancerFrontEnd')))]",
        "copy": [
            {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "input": {
                    "name": "[concat('loadBalancerFrontEnd', copyIndex('constructFrontEndIPConfigID'))]",
                    "properties": {
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip-0', copyIndex('constructFrontEndIPConfigID', 1)))]"
                        }
                    }
                },
                "name": "constructFrontEndIPConfigID"
            },
            {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": {
                    "name": "[concat('app-', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')])]",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('externalLoadBalancerName'), 'loadBalancerBackEnd')]"
                        },
                        "backendPort": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')]]",
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerFrontEnd0')]"
                        },
                        "frontendPort": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')]]",
                        "idleTimeoutInMinutes": 15,
                        "loadDistribution": "SourceIP",
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('externalLoadBalancerName'), concat('tcp_probe_', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')]))]"
                        },
                        "protocol": "Tcp"
                    }
                },
                "name": "constructLoadBalancerRule"
            },
            {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": {
                    "name": "[concat('tcp_probe_', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerProbes')])]",
                    "properties": {
                        "intervalInSeconds": 15,
                        "numberOfProbes": 3,
                        "port": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerProbes')]]",
                        "protocol": "Tcp"
                    }
                },
                "name": "constructLoadBalancerProbes"
            },
            {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": {
                    "name": "[concat('app-internal-', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRuleInternal')])]",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('internalLoadBalancerName'), 'loadBalancerBackEnd')]"
                        },
                        "backendPort": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRuleInternal')]]",
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('internalLoadBalancerName'), 'loadBalancerFrontEnd')]"
                        },
                        "frontendPort": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRuleInternal')]]",
                        "idleTimeoutInMinutes": 15,
                        "loadDistribution": "SourceIP",
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('internalLoadBalancerName'), concat('tcp_probe_internal_', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRuleInternal')]))]"
                        },
                        "protocol": "Tcp"
                    }
                },
                "name": "constructLoadBalancerRuleInternal"
            },
            {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": {
                    "name": "[concat('tcp_probe_internal_', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerProbesInternal')])]",
                    "properties": {
                        "intervalInSeconds": 15,
                        "numberOfProbes": 3,
                        "port": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerProbesInternal')]]",
                        "protocol": "Tcp"
                    }
                },
                "name": "constructLoadBalancerProbesInternal"
            },
            {
                "count": "[variables('nsg0Length')]",
                "input": {
                    "name": "[concat('nsg_01_allow_', copyIndex('constructNsg0Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG1 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg0')[copyIndex('constructNsg0Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg0Array')))]",
                        "protocol": "[parameters('nsg0')[copyIndex('constructNsg0Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg0')[copyIndex('constructNsg0Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg0Array"
            },
            {
                "count": "[variables('nsg1Length')]",
                "input": {
                    "name": "[concat('nsg_02_allow_', copyIndex('constructNsg1Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG2 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg1')[copyIndex('constructNsg1Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg1Array')))]",
                        "protocol": "[parameters('nsg1')[copyIndex('constructNsg1Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg1')[copyIndex('constructNsg1Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg1Array"
            },
            {
                "count": "[variables('nsg2Length')]",
                "input": {
                    "name": "[concat('nsg_03_allow_', copyIndex('constructNsg2Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG3 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg2')[copyIndex('constructNsg2Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg2Array')))]",
                        "protocol": "[parameters('nsg2')[copyIndex('constructNsg2Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg2')[copyIndex('constructNsg2Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg2Array"
            },
            {
                "count": "[variables('nsg3Length')]",
                "input": {
                    "name": "[concat('nsg_04_allow_', copyIndex('constructNsg3Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG4 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg3')[copyIndex('constructNsg3Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg3Array')))]",
                        "protocol": "[parameters('nsg3')[copyIndex('constructNsg3Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg3')[copyIndex('constructNsg3Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg3Array"
            },
            {
                "count": "[variables('nsg4Length')]",
                "input": {
                    "name": "[concat('nsg_05_allow_', copyIndex('constructNsg4Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG5 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg4')[copyIndex('constructNsg4Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg4Array')))]",
                        "protocol": "[parameters('nsg4')[copyIndex('constructNsg4Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg4')[copyIndex('constructNsg4Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg4Array"
            }
        ],
        "uniqueString": "[toLower(parameters('uniqueString'))]",
        "emptyArray": [],
        "inboundNatPoolsArray": [
            {
                "name": "sshnatpool",
                "properties": {
                    "backendPort": 22,
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerMgmtFrontEnd')]"
                    },
                    "frontendPortRangeEnd": 50100,
                    "frontendPortRangeStart": 50001,
                    "protocol": "Tcp"
                }
            },
            {
                "name": "mgmtnatpool",
                "properties": {
                    "backendPort": 8443,
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerMgmtFrontEnd')]"
                    },
                    "frontendPortRangeEnd": 50200,
                    "frontendPortRangeStart": 50101,
                    "protocol": "Tcp"
                }
            }
        ],
        "loadBalancerBackEnd": [
            {
                "name": "loadBalancerBackEnd"
            }
        ],
        "loadBalancerBackEndArray": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), variables('loadBalancerBackEnd'), union(variables('loadBalancerBackEnd'), variables('loadBalancerMgmtBackEnd')))]",
        "loadBalancerMgmtBackEnd": [
            {
                "name": "loadBalancerMgmtBackEnd"
            }
        ],
        "loadBalancerRulePortsLength": "[length(parameters('loadBalancerRulePorts'))]",
        "loadBalancingProbesArray": "[variables('constructLoadBalancerProbes')]",
        "loadBalancingRulesArray": "[variables('constructLoadBalancerRule')]",
        "loadBalancingProbesArrayInternal": "[variables('constructLoadBalancerProbesInternal')]",
        "loadBalancingRulesArrayInternal": "[variables('constructLoadBalancerRuleInternal')]",
        "mgmtLoadBalancerFrontEnd": [
            {
                "name": "loadBalancerMgmtFrontEnd",
                "properties": {
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip-01'))]"
                    }
                }
            }
        ],
        "nsg0Array": "[variables('constructNsg0Array')]",
        "nsg0Id": "[if(greater(variables('nsg0Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg0Name'))), variables('emptyArray'))]",
        "nsg0Length": "[length(parameters('nsg0'))]",
        "nsg0Name": "[concat(variables('uniqueString'), '-nsg-01')]",
        "nsg1Array": "[variables('constructNsg1Array')]",
        "nsg1Id": "[if(greater(variables('nsg1Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg1Name'))), variables('emptyArray'))]",
        "nsg1Length": "[length(parameters('nsg1'))]",
        "nsg1Name": "[concat(variables('uniqueString'), '-nsg-02')]",
        "nsg2Array": "[variables('constructNsg2Array')]",
        "nsg2Id": "[if(greater(variables('nsg2Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg2Name'))), variables('emptyArray'))]",
        "nsg2Length": "[length(parameters('nsg2'))]",
        "nsg2Name": "[concat(variables('uniqueString'), '-nsg-03')]",
        "nsg3Array": "[variables('constructNsg3Array')]",
        "nsg3Id": "[if(greater(variables('nsg3Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg3Name'))), variables('emptyArray'))]",
        "nsg3Length": "[length(parameters('nsg3'))]",
        "nsg3Name": "[concat(variables('uniqueString'), '-nsg-04')]",
        "nsg4Array": "[variables('constructNsg4Array')]",
        "nsg4Id": "[if(greater(variables('nsg4Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg4Name'))), variables('emptyArray'))]",
        "nsg4Length": "[length(parameters('nsg4'))]",
        "nsg4Name": "[concat(variables('uniqueString'), '-nsg-05')]",
        "outboundNsgRule": [
            {
                "name": "allow_loadBalancer_traffic",
                "properties": {
                    "access": "Allow",
                    "description": "Outbound traffic through load balancer",
                    "destinationAddressPrefix": "AzureLoadBalancer",
                    "destinationPortRange": "*",
                    "direction": "Outbound",
                    "priority": 200,
                    "protocol": "Tcp",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*"
                }
            }
        ],
        "outboundRuleConfigArray": [
            {
                "name": "outboundRuleForInit",
                "properties": {
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('externalLoadBalancerName'), 'loadBalancerMgmtBackEnd')]"
                    },
                    "frontendIPConfigurations": [
                        {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerMgmtFrontEnd')]"
                        }
                    ],
                    "protocol": "All"
                }
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg0Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[variables('nsg0Array')]"
            },
            "condition": "[not(empty(parameters('nsg0')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg1Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg1Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg1')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg2Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg2Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg2')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg3Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg3Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg3')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg4Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg4Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg4')))]"
        },
        {
            "apiVersion": "2020-06-01",
            "condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicMgmtIpAddresses')]",
                "name": "mgmtpipcopy"
            },
            "location": "[resourceGroup().location]",
            "name": "[concat(variables('uniqueString'), '-mgmt-pip-0', copyIndex(1))]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('uniqueString'), '-mgmt', copyIndex(0))]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "2020-06-01",
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "name": "apppipcopy"
            },
            "location": "[resourceGroup().location]",
            "name": "[concat(variables('uniqueString'), '-app-pip-0', copyIndex(1))]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('uniqueString'), '-app', copyIndex(0))]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "2020-06-01",
            "condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
            "dependsOn": [
                "apppipcopy"
            ],
            "location": "[resourceGroup().location]",
            "name": "[if(not(equals(tolower(parameters('externalLoadBalancerName')), string('none'))), parameters('externalLoadBalancerName'), string('none1'))]",
            "properties": {
                "backendAddressPools": "[variables('loadBalancerBackEndArray')]",
                "frontendIPConfigurations": "[variables('appLoadBalancerFrontEnd')]",
                "inboundNatPools": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), json('null'), variables('inboundNatPoolsArray'))]",
                "loadBalancingRules": "[variables('loadBalancingRulesArray')]",
                "outboundRules": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), json('null'), variables('outboundRuleConfigArray'))]",
                "probes": "[variables('loadBalancingProbesArray')]"
            },
            "sku": {
                "name": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "2020-06-01",
            "condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
            "location": "[resourceGroup().location]",
            "name": "[parameters('internalLoadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[parameters('internalSubnetId')]"
                            }
                        }
                    }
                ],
                "loadBalancingRules": "[variables('loadBalancingRulesArrayInternal')]",
                "probes": "[variables('loadBalancingProbesArrayInternal')]"
            },
            "sku": {
                "name": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        }
    ],
    "outputs": {
        "externalIpIds": {
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip-0', copyIndex(1)))]"
            },
            "type": "array"
        },
        "externalIps": {
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip-0', copyIndex(1)))).ipAddress]"
            },
            "type": "array"
        },
        "externalIpDns": {
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIPAddresses')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip-0', copyIndex(1)))).dnsSettings.fqdn]"
            },
            "type": "array"
        },
        "externalBackEndLoadBalancerId": {
            "condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('externalLoadBalancerName'), 'loadBalancerBackEnd')]"
        },
        "externalBackEndMgmtLoadBalancerId": {
            "condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), greater(parameters('numberPublicMgmtIpAddresses'), 0))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('externalLoadBalancerName'), 'loadBalancerMgmtBackEnd')]"
        },
        "externalFrontEndLoadBalancerId": {
            "condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "input": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('externalLoadBalancerName'), concat('loadBalancerFrontEnd', copyIndex()))]"
            },
            "type": "array"
        },
        "externalFrontEndLoadBalancerInboundId": {
            "condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), equals(parameters('numberPublicMgmtIpAddresses'), 0))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerMgmtFrontEnd')]"
        },
        "externalFrontEndMgmtLoadBalancerId": {
            "condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), greater(parameters('numberPublicMgmtIpAddresses'), 0))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerMgmtFrontEnd')]"
        },
        "externalLoadBalancer": {
            "condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName'))]"
        },
        "externalLoadBalancerProbesId": {
            "condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
            "copy": {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('externalLoadBalancerName'), concat('tcp_probe_', parameters('loadBalancerRulePorts')[copyIndex()]))]"
            },
            "type": "array"
        },
        "externalLoadBalancerRulesId": {
            "condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
            "copy": {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": "[resourceId('Microsoft.Network/loadBalancers/loadBalancingRules', parameters('externalLoadBalancerName'), concat('app-', parameters('loadBalancerRulePorts')[copyIndex()]))]"
            },
            "type": "array"
        },
        "inboundMgmtNatPool": {
            "condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), greater(parameters('numberPublicMgmtIpAddresses'), 0))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', parameters('externalLoadBalancerName'), 'mgmtnatpool')]"
        },
        "inboundSshNatPool": {
            "condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), greater(parameters('numberPublicMgmtIpAddresses'), 0))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', parameters('externalLoadBalancerName'), 'sshnatpool')]"
        },
        "internalBackEndLoadBalancerId": {
            "condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('internalLoadBalancerName'), 'loadBalancerBackEnd')]"
        },
        "internalFrontEndLoadBalancerIp": {
            "condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
            "type": "string",
            "value": "[reference(parameters('internalLoadBalancerName')).frontendIPConfigurations[0].properties.privateIPAddress]"
        },
        "internalLoadBalancerProbesId": {
            "condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
            "copy": {
                "count": "[variables('loadBalancerRulePortsLength')]",
                "input": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('internalLoadBalancerName'), concat('tcp_probe_internal_', parameters('loadBalancerRulePorts')[copyIndex()]))]"
            },
            "type": "array"
        },
        "internalLoadBalancer": {
            "condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
            "type": "string",
            "value": "[resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName'))]"
        },
        "mgmtIpIds": {
            "condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicMgmtIpAddresses')]",
                "input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip-0', copyIndex(1)))]"
            },
            "type": "array"
        },
        "mgmtIps": {
            "condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicMgmtIpAddresses')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip-0', copyIndex(1)))).ipAddress]"
            },
            "type": "array"
        },
        "nsg0Id": {
            "condition": "[not(empty(parameters('nsg0')))]",
            "type": "string",
            "value": "[variables('nsg0Id')[0]]"
        },
        "nsg1Id": {
            "condition": "[not(empty(parameters('nsg1')))]",
            "type": "string",
            "value": "[variables('nsg1Id')[0]]"
        },
        "nsg2Id": {
            "condition": "[not(empty(parameters('nsg2')))]",
            "type": "string",
            "value": "[variables('nsg2Id')[0]]"
        },
        "nsg3Id": {
            "condition": "[not(empty(parameters('nsg3')))]",
            "type": "string",
            "value": "[variables('nsg3Id')[0]]"
        },
        "nsg4Id": {
            "condition": "[not(empty(parameters('nsg4')))]",
            "type": "string",
            "value": "[variables('nsg4Id')[0]]"
        },
        "nsgIds": {
            "value": "[union(variables('nsg0Id'), variables('nsg1Id'), variables('nsg2Id'), variables('nsg3Id'), variables('nsg4Id'))]",
            "type": "array"
        }
    }
}
