{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "2.9.0.0",
	"parameters": {
		"solutionType": {
			"allowedValues": [
				"standard",
				"failover",
				"logging"
			],
			"defaultValue": "standard",
			"metadata": {
				"description": "Defines solution type to provision correct IAM role."
			},
			"type": "string"
		},
		"roleDescription": {
			"defaultValue": "Role created by the Access template.",
			"metadata": {
				"description": "Detailed description of the role definition."
			},
			"type": "string"
		},
		"roleName": {
			"metadata": {
				"description": "REQUIRED - Friendly name of the role definition."
			},
			"type": "string"
		},
		"customRolePermissions": {
			"defaultValue": [],
			"metadata": {
				"description": "Array of permissions for the custom roleDefinition."
			},
			"type": "array"
		},
		"customAssignableScopes": {
			"defaultValue": [],
			"metadata": {
				"description": "Array of scopes assigned for the roleDefinition."
			},
			"type": "array"
		},
		"keyVaultPermissionsKeys": {
			"defaultValue": [
				"get",
				"list"
			],
			"metadata": {
				"description": "Array of permissions allowed on KeyVault Secrets for role."
			},
			"type": "array"
		},
		"keyVaultPermissionsSecrets": {
			"defaultValue": [
				"get",
				"list"
			],
			"metadata": {
				"description": "Array of permissions allowed on KeyVault Secrets for role."
			},
			"type": "array"
		},
		"secretValue": {
			"defaultValue": "",
			"metadata": {
				"description": "If provided and secretId is empty, a secret with the supplied value will be created in a new Azure Key Vault."
			},
			"type": "securestring"
		},
		"secretId": {
			"defaultValue": "",
			"metadata": {
				"description": "The full URL of the secretId, including KeyVault Name. For example: https://yourvaultname.vault.azure.net/secrets/yoursecretid."
			},
			"type": "string"
		},
		"uniqueString": {
			"metadata": {
				"description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
			},
			"type": "string"
		},
		"userAssignedIdentityName": {
			"defaultValue": "",
			"metadata": {
				"description": "Name for user assigned identity. This is required for creating Azure User Assigned Identity."
			},
			"type": "string"
		},
		"tagValues": {
			"defaultValue": {
				"application": "f5demoapp",
				"cost": "f5cost",
				"environment": "f5env",
				"group": "f5group",
				"owner": "f5owner"
			},
			"metadata": {
				"description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
			},
			"type": "object"
		}
	},
	"variables": {
		"createCustomRolePermissions": "[not(empty(parameters('customRolePermissions')))]",
		"createFailover": "[equals(parameters('solutionType'), 'failover')]",
		"createSecret": "[and(not(empty(parameters('secretValue'))), empty(parameters('secretId')))]",
		"useSecret": "[and(not(empty(parameters('secretId'))), empty(parameters('secretValue')))]",
		"doSecret": "[or(variables('createSecret'), variables('useSecret'))]",
		"createUserAssignedIdentity": "[not(empty(parameters('userAssignedIdentityName')))]",
		"actions": {
			"standard": "[union(variables('standardActions'), variables('telemetryActions'))]",
			"failover": "[union(variables('failoverActions'), variables('standardActions'), variables('telemetryActions'))]",
			"logging": "[variables('telemetryActions')]"
		},
		"dataActions": {
			"standard": "[union(variables('standardDataActions'), variables('telemetryDataActions'))]",
			"failover": "[union(variables('failoverDataActions'), variables('standardDataActions'), variables('telemetryDataActions'))]",
			"logging": "[variables('telemetryDataActions')]"
		},
		"standardActions": [
			"Microsoft.Authorization/*/read",
			"Microsoft.Compute/locations/*/read",
			"Microsoft.Compute/virtualMachines/*/read",
			"Microsoft.Compute/virtualMachineScaleSets/*/read",
			"Microsoft.Compute/virtualMachineScaleSets/networkInterfaces/read",
			"Microsoft.Network/networkInterfaces/read",
			"Microsoft.Network/publicIPAddresses/read",
			"Microsoft.Resources/subscriptions/resourceGroups/read"		
		],
		"standardDataActions": [],
		"telemetryActions": [
			"*/read",
			"Microsoft.Compute/virtualMachines/extensions/*",
			"Microsoft.HybridCompute/machines/extensions/write",
			"Microsoft.Insights/alertRules/*",
			"Microsoft.Insights/diagnosticSettings/*",
			"Microsoft.Insights/Register/Action",
			"Microsoft.OperationalInsights/*",
			"Microsoft.OperationsManagement/*",
			"Microsoft.Resources/deployments/*",
			"Microsoft.Resources/subscriptions/read",
			"Microsoft.Resources/subscriptions/resourceGroups/deployments/*",
			"Microsoft.Storage/storageAccounts/listKeys/action",
			"Microsoft.Support/*"
		],
		"telemetryDataActions": [
			"Microsoft.Insights/Metrics/Write",
			"Microsoft.Insights/Telemetry/Write"
		],
		"failoverActions": [
			"Microsoft.Network/*/join/action",
			"Microsoft.Network/networkInterfaces/write",
			"Microsoft.Network/publicIPAddresses/write",
			"Microsoft.Network/routeTables/*/read",
			"Microsoft.Network/routeTables/*/write",
			"Microsoft.Storage/storageAccounts/listKeys/action",
			"Microsoft.Storage/storageAccounts/read"
		],
		"failoverDataActions": [],
		"solutionPermissions": [
			{
				"actions": "[variables('actions')[parameters('solutionType')]]",
				"notActions": [],
				"dataActions": "[variables('dataActions')[parameters('solutionType')]]",
				"notDataActions": []
			}
		],
		"keyVaultName": "[if(not(empty(parameters('secretId'))), variables('secretIdSplitArray')[1], concat(parameters('uniqueString'), 'kv'))]",
		"assignableScopes": "[if(empty(parameters('customAssignableScopes')), createArray(resourceGroup().id), parameters('customAssignableScopes'))]",
		"roleDefinitionName": "[guid(resourceGroup().id, string(parameters('customRolePermissions')), string(parameters('roleName')))]",
		"secretIdSplitDelimiters": [ "https://", "[environment().suffixes.keyvaultDns]" ],
		"secretIdSplitArray": "[split(parameters('secretId'),variables('secretIdSplitDelimiters'))]",
		"tenantId": "[subscription().tenantId]",
		"userAssignedIdentityName": "[if(variables('createUserAssignedIdentity'), parameters('userAssignedIdentityName'), concat(parameters('uniqueString'), '-bigip-identity'))]"
	},
	"resources": [
		{
			"apiVersion": "2018-07-01",
			"name": "[variables('roleDefinitionName')]",
			"properties": {
				"assignableScopes": "[variables('assignableScopes')]",
				"description": "[parameters('roleDescription')]",
				"isCustom": true,
				"permissions": "[if(variables('createCustomRolePermissions'), parameters('customRolePermissions'), variables('solutionPermissions'))]",
				"roleName": "[parameters('roleName')]",
				"type": "customRole"
			},
			"type": "Microsoft.Authorization/roleDefinitions"
		},
		{
			"apiVersion": "2018-11-30",
			"location": "[resourceGroup().location]",
			"name": "[variables('userAssignedIdentityName')]",
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.ManagedIdentity/userAssignedIdentities"
		},
		{
			"apiVersion": "2021-04-01-preview",
			"condition": "[variables('createUserAssignedIdentity')]",
			"dependsOn": [
				"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]",
				"[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionName'))]"
			],
			"name": "[guid(resourceGroup().id, 'roleId')]",
			"properties": {
				"principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2018-11-30').principalId]",
				"roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('roleDefinitionName'))]",
				"scope": "[resourceGroup().id]",
				"principalType": "ServicePrincipal"
			},
			"type": "Microsoft.Authorization/roleAssignments"
		},
		{
			"apiVersion": "2022-07-01",
			"condition": "[and(variables('createSecret'), variables('createUserAssignedIdentity'))]",
			"name": "[variables('keyVaultName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"accessPolicies": [
					{
						"objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2018-11-30').principalId]",
						"permissions": {
							"keys": "[parameters('keyVaultPermissionsKeys')]",
							"secrets": "[parameters('keyVaultPermissionsSecrets')]"
						},
						"tenantId": "[variables('tenantId')]"
					}
				],
				"enabledForDeployment": true,
				"enabledForDiskEncryption": true,
				"enabledForTemplateDeployment": true,
				"enablePurgeProtection": true,
				"networkAcls": {
					"bypass": "AzureServices",
					"defaultAction": "Allow"
				},  
				"sku": {
					"family": "A",
					"name": "standard"
				},
				"tenantId": "[variables('tenantId')]"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.KeyVault/vaults"
		},
		{
			"apiVersion": "2022-07-01",
			"condition": "[and(variables('createSecret'), variables('createUserAssignedIdentity'))]",
			"dependsOn": [
				"[variables('keyVaultName')]"
			],
			"name": "[concat(variables('keyVaultName'), '/BigIpSecret')]",
			"properties": {
				"contentType": "string",
				"value": "[parameters('secretValue')]"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.KeyVault/vaults/secrets"
		},
		{
			"apiVersion": "2022-07-01",
			"condition": "[and(variables('useSecret'), variables('createUserAssignedIdentity'))]",
			"dependsOn": [
				"[variables('keyVaultName')]"
			],
			"name": "[concat(variables('keyVaultName'), '/add')]",
			"properties": {
				"accessPolicies": [
					{
						"objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2018-11-30').principalId]",
						"permissions": {
							"keys": "[parameters('keyVaultPermissionsKeys')]",
							"secrets": "[parameters('keyVaultPermissionsSecrets')]"
						},
						"tenantId": "[variables('tenantId')]"
					}
				],
				"enabledForDeployment": true,
				"enabledForDiskEncryption": true,
				"enabledForTemplateDeployment": true,
				"networkAcls": {
					"bypass": "AzureServices",
					"defaultAction": "Allow"
				},
				"tenantId": "[variables('tenantId')]"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.KeyVault/vaults/accessPolicies"
		}
	],
	"outputs": {
		"roleDefinitionId": {
			"type": "string",
			"value": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('roleDefinitionName'))]"
		},
		"keyVaultName": {
			"condition": "[variables('doSecret')]",
			"type": "string",
			"value": "[variables('keyVaultName')]"
		},
		"secretId": {
			"condition": "[variables('doSecret')]",
			"type": "string",
			"value": "[if(variables('createSecret'), reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'BigIpSecret')).secretUri, parameters('secretId'))]"
		},
		"userAssignedIdentityId": {
			"condition": "[variables('createUserAssignedIdentity')]",
			"type": "string",
			"value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]"
		}
	}
}