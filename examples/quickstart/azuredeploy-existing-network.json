{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "2.9.0.0",
  "parameters": {
    "templateBaseUrl": {
      "defaultValue": "https://cdn.f5.com/product/cloudsolutions/",
      "metadata": {
        "description": "The publicly accessible URL where the linked ARM templates are located."
      },
      "type": "string"
    },
    "allowUsageAnalytics": {
      "defaultValue": true,
      "metadata": {
        "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **false** statistics are not sent."
      },
      "type": "bool"
    },
    "artifactLocation": {
      "defaultValue": "[concat('f5-azure-arm-templates-v2/v', deployment().properties.template.contentVersion, '/examples/')]",
      "metadata": {
        "description": "The directory, relative to the templateBaseUrl, where the modules folder is located."
      },
      "type": "string"
    },
    "uniqueString": {
      "metadata": {
        "description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
      },
      "type": "string"
    },
    "bigIpHostname": {
      "defaultValue": "bigip01.local",
      "metadata": {
        "description": "Supply the hostname you would like to use for the BIG-IP instance. The hostname must contain fewer than 63 characters."
      },
      "type": "string"
    },
    "bigIpImage": {
      "defaultValue": "f5-networks:f5-big-ip-best:f5-big-best-plus-hourly-25mbps:16.1.303000",
      "metadata": {
        "description": "2 formats accepted. URN of the image to use in Azure marketplace or id of custom image. Example URN value: f5-networks:f5-big-ip-byol:f5-big-all-2slot-byol:16.1.303000. You can find the URNs of F5 marketplace images in the README for this template or by running the command: az vm image list --output yaml --publisher f5-networks --all. See https://clouddocs.f5.com/cloud/public/v1/azure/Azure_download.html for information on creating custom BIG-IP image."
      },
      "type": "string"
    },
    "bigIpInstanceType": {
      "defaultValue": "Standard_D8s_v4",
      "metadata": {
        "description": "Enter valid instance type."
      },
      "type": "string"
    },
    "bigIpLicenseKey": {
      "defaultValue": "",
      "metadata": {
        "description": "Supply the F5 BYOL license key for the BIG-IP instance. Leave this parameter blank if deploying the PAYG solution."
      },
      "type": "string"
    },
    "sshKey": {
      "metadata": {
        "description": "REQUIRED - Supply the public key that will be used for SSH authentication to the BIG-IP and application virtual machines."
      },
      "type": "string"
    },
    "numNics": {
      "allowedValues": [
        1,
        2,
        3
      ],
      "defaultValue": 3,
      "metadata": {
        "description": "Enter valid number of network interfaces to create on the BIG-IP VE instance."
      },
      "type": "int"
    },
    "bigIpMgmtSubnetId": {
      "metadata": {
        "description": "REQUIRED - Supply the Azure resource ID of the management subnet where BIG-IP VE instances will be deployed."
      },
      "type": "string"
    },
    "bigIpExternalSubnetId": {
      "defaultValue": "",
      "metadata": {
        "description": "Supply the Azure resource ID of the external subnet where BIG-IP VE instances will be deployed."
      },
      "type": "string"
    },
    "bigIpInternalSubnetId": {
      "defaultValue": "",
      "metadata": {
        "description": "Supply the Azure resource ID of the internal subnet where BIG-IP VE instances will be deployed."
      },
      "type": "string"
    },
    "bigIpMgmtSelfAddress": {
      "defaultValue": "10.0.0.11",
      "metadata": {
        "description": "Management Private IP Address for BIGIP Instance. IP address parameter must be in the form x.x.x.x."
      },
      "type": "string"
    },
    "bigIpExternalSelfAddress": {
      "defaultValue": "10.0.1.11",
      "metadata": {
        "description": "External Private IP Address for BIGIP Instance. IP address parameter must be in the form x.x.x.x."
      },
      "type": "string"
    },
    "bigIpInternalSelfAddress": {
      "defaultValue": "10.0.2.11",
      "metadata": {
        "description": "Internal Private IP Address for BIGIP Instance. IP address parameter must be in the form x.x.x.x."
      },
      "type": "string"
    },
    "provisionPublicIpMgmt": {
      "defaultValue": false,
      "metadata": {
        "description": "Select true if you would like to provision a public IP address for accessing the BIG-IP instance(s)."
      },
      "type": "bool"
    },
    "provisionServicePublicIp": {
      "defaultValue": false,
      "metadata": {
        "description": "Flag to deploy public IP address resource for application."
      },
      "type": "bool"
    },
    "servicePrivateIpAddress": {
      "defaultValue": "",
      "metadata": {
        "description": "REQUIRED - External private VIP Address for BIGIP Instance. IP address parameter must be in the form x.x.x.x. The address must reside in the same subnet and address space as the IP address provided for bigIpExternalSelfAddress."
      },
      "type": "string"
    },
    "restrictedSrcAddressMgmt": {
      "metadata": {
        "description": "REQUIRED - When creating management security group, this field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources."
      },
      "type": "string"
    },
    "restrictedSrcAddressApp": {
      "metadata": {
        "description": "REQUIRED - When creating application security group, this field restricts application access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources."
      },
      "type": "string"
    },
    "bigIpRuntimeInitConfig": {
      "defaultValue": "https://raw.githubusercontent.com/F5Networks/f5-azure-arm-templates-v2/v2.9.0.0/examples/quickstart/bigip-configurations/runtime-init-conf-3nic-payg.yaml",
      "metadata": {
        "description": "Supply a URL to the bigip-runtime-init configuration file in YAML or JSON format, or an escaped JSON string to use for f5-bigip-runtime-init configuration."
      },
      "type": "string"
    },
    "bigIpRuntimeInitPackageUrl": {
      "defaultValue": "https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.6.2/dist/f5-bigip-runtime-init-1.6.2-1.gz.run",
      "metadata": {
        "description": "URL for BIG-IP Runtime Init package"
      },
      "type": "string"
    },
    "useAvailabilityZones": {
      "defaultValue": false,
      "metadata": {
        "description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set false. If the region does not support availability zones the input should be set to false."
      },
      "type": "bool"
    },
    "bigIpUserAssignManagedIdentity": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter user assigned management identity ID to be associated to virtual machine. Leave default if not used."
      },
      "type": "string"
    },
    "bigIpPasswordSecretId": {
      "defaultValue": "",
      "metadata": {
        "description": "The full URL of an existing secretId to pass to the BIG-IP instance, including KeyVault Name. For example: https://yourvaultname.vault.azure.net/secrets/yoursecretid. If not provided, the solution will create a secret with the value provided for the bigIpPasswordSecretValue parameter. This parameter is ignored if bigIpUserAssignManagedIdentity is provided."
      },
      "type": "string"
    },
    "bigIpPasswordSecretValue": {
      "defaultValue": "",
      "metadata": {
        "description": "The value to use for the secret to pass to the BIG-IP instance. If not provided, the solution will pass the value provided for the bigIpPasswordSecretId parameter. This parameter is ignored if bigIpUserAssignManagedIdentity is provided."
      },
      "type": "securestring"
    },
    "tagValues": {
      "defaultValue": {
        "application": "f5demoapp",
        "cost": "f5cost",
        "environment": "f5env",
        "group": "f5group",
        "owner": "f5owner"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    }
  },
  "variables": {
    "contentVersion": "[deployment().properties.template.contentVersion]",
    "uniqueString": "[toLower(parameters('uniqueString'))]",
    "adminUsername": "[string('azureuser')]",
    "createAccess": "[or(variables('createSecret'), variables('useSecret'))]",
    "solutionType": "standard",
    "createSecret": "[and(not(empty(parameters('bigIpPasswordSecretValue'))), empty(parameters('bigIpPasswordSecretId')), empty(parameters('bigIpUserAssignManagedIdentity')))]",
    "useSecret": "[and(not(empty(parameters('bigIpPasswordSecretId'))), empty(parameters('bigIpPasswordSecretValue')), empty(parameters('bigIpUserAssignManagedIdentity')))]",
    "customAssignableScopes": [],
    "customRolePermissions": [],
    "roleDescription": "Role created by quickstart deployment",
    "roleName": "[concat(variables('uniqueString'), '-bigip-high-availability-role')]",
    "keyVaultPermissionsKeys": [
      "list",
      "get"
    ],
    "keyVaultPermissionsSecrets": [
      "list",
      "get"
    ],
    "userAssignedIdentityName": "[concat(variables('uniqueString'), '-bigip-user-identity')]",
    "provisionServicePrivateIp": "[not(empty(parameters('servicePrivateIpAddress')))]",
    "externalLoadBalancerName": "None",
    "internalLoadBalancerName": "None",
    "loadBalancerRulePorts": [],
    "mgmtRulesArray": [
      {
        "destinationPortRanges": [
          "22",
          "[if(equals(parameters('numNics'), 1), '8443', '443')]"
        ],
        "sourceAddressPrefix": "[parameters('restrictedSrcAddressMgmt')]",
        "protocol": "Tcp"
      }
    ],
    "externalRulesArray": [
      {
        "destinationPortRanges": [
          "80",
          "443"
        ],
        "sourceAddressPrefix": "[parameters('restrictedSrcAddressApp')]",
        "protocol": "Tcp"
      }
    ],
    "internalRulesArray": [
      {
        "destinationPortRanges": [
          "80",
          "443"
        ],
        "sourceAddressPrefix": "[parameters('restrictedSrcAddressApp')]",
        "protocol": "Tcp"
      }
    ],
    "mgmtSecurityGroup": "[if(equals(parameters('numNics'), 1), union(variables('mgmtRulesArray'), variables('externalRulesArray'), variables('internalRulesArray')), variables('mgmtRulesArray'))]",
    "externalSecurityGroup": "[if(greaterOrEquals(parameters('numNics'), 2), variables('externalRulesArray'), createArray())]",
    "internalSecurityGroup": "[if(greaterOrEquals(parameters('numNics'), 3), variables('internalRulesArray'), createArray())]",
    "vmName": "[concat(variables('uniqueString'), '-bigip-vm-01')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "condition": "[variables('createAccess')]",
      "name": "accessTemplate",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/access/access.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "solutionType": {
            "value": "[variables('solutionType')]"
          },
          "customAssignableScopes": {
            "value": "[variables('customAssignableScopes')]"
          },
          "roleDescription": {
            "value": "[variables('roleDescription')]"
          },
          "roleName": {
            "value": "[variables('roleName')]"
          },
          "customRolePermissions": {
            "value": "[variables('customRolePermissions')]"
          },
          "keyVaultPermissionsKeys": {
            "value": "[variables('keyVaultPermissionsKeys')]"
          },
          "keyVaultPermissionsSecrets": {
            "value": "[variables('keyVaultPermissionsSecrets')]"
          },
          "secretId": {
            "value": "[parameters('bigIpPasswordSecretId')]"
          },
          "secretValue": {
            "value": "[parameters('bigIpPasswordSecretValue')]"
          },
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "userAssignedIdentityName": {
            "value": "[variables('userAssignedIdentityName')]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "dagTemplate",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/dag/dag.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "externalLoadBalancerName": {
            "value": "[variables('externalLoadBalancerName')]"
          },
          "internalLoadBalancerName": {
            "value": "[variables('internalLoadBalancerName')]"
          },
          "internalSubnetId": {
            "value": ""
          },
          "loadBalancerRulePorts": {
            "value": "[variables('loadBalancerRulePorts')]"
          },
          "nsg0": {
            "value": "[variables('mgmtSecurityGroup')]"
          },
          "nsg1": {
            "value": "[variables('externalSecurityGroup')]"
          },
          "nsg2": {
            "value": "[variables('internalSecurityGroup')]"
          },
          "numberPublicExternalIpAddresses": {
            "value": "[if(parameters('provisionServicePublicIp'), 2, 1)]"
          },
          "numberPublicMgmtIpAddresses": {
            "value": "[if(parameters('provisionPublicIpMgmt'), 1, 0)]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "bigIpTemplate",
      "dependsOn": [
        "dagTemplate"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/bigip-standalone/bigip.json')]",
          "contentVersion": "[variables('contentVersion')]"
        },
        "parameters": {
          "adminUsername": {
            "value": "[variables('adminUsername')]"
          },
          "allowUsageAnalytics": {
            "value": "[parameters('allowUsageAnalytics')]"
          },
          "hostname": {
            "value": "[parameters('bigIpHostname')]"
          },
          "licenseKey": {
            "value": "[parameters('bigIpLicenseKey')]"
          },
          "image": {
            "value": "[parameters('bigIpImage')]"
          },
          "instanceType": {
            "value": "[parameters('bigIpInstanceType')]"
          },
          "mgmtSubnetId": {
            "value": "[parameters('bigIpMgmtSubnetId')]"
          },
          "mgmtNsgID": {
            "value": "[reference('dagTemplate').outputs.nsg0Id.value]"
          },
          "mgmtPublicIpId": {
            "value": "[if(parameters('provisionPublicIpMgmt'), reference('dagTemplate').outputs.mgmtIpIds.value[0], '')]"
          },
          "mgmtSelfIp": {
            "value": "[parameters('bigIpMgmtSelfAddress')]"
          },
          "nic1SubnetId": {
            "value": "[if(greaterOrEquals(parameters('numNics'), 2), parameters('bigIpExternalSubnetId'), '')]"
          },
          "nic1NsgId": {
            "value": "[if(greaterOrEquals(parameters('numNics'), 2), reference('dagTemplate').outputs.nsg1Id.value, '')]"
          },
          "nic1PrimaryPublicId": {
            "value": "[reference('dagTemplate').outputs.externalIpIds.value[0]]"
          },
          "nic1SelfIp": {
            "value": "[if(greaterOrEquals(parameters('numNics'), 2), parameters('bigIpExternalSelfAddress'), '')]"
          },
          "nic1ServiceIPs": {
            "value": "[if(variables('provisionServicePrivateIp'), if(parameters('provisionServicePublicIp'), createArray(createObject('publicIpId', reference('dagTemplate').outputs.externalIpIds.value[1], 'privateIpAddress', parameters('servicePrivateIpAddress'))), createArray(createObject('publicIpId', '', 'privateIpAddress', parameters('servicePrivateIpAddress')))), createArray())]"
          },
          "nic2SubnetId": {
            "value": "[if(greaterOrEquals(parameters('numNics'), 3), parameters('bigIpInternalSubnetId'), '')]"
          },
          "nic2NsgId": {
            "value": "[if(greaterOrEquals(parameters('numNics'), 3), reference('dagTemplate').outputs.nsg2Id.value, '')]"
          },
          "nic2PrimaryPublicId": {
            "value": ""
          },
          "nic2SelfIp": {
            "value": "[if(greaterOrEquals(parameters('numNics'), 3), parameters('bigIpInternalSelfAddress'), '')]"
          },
          "nic2ServiceIPs": {
            "value": []
          },
          "roleDefinitionId": {
            "value": ""
          },
          "bigIpRuntimeInitPackageUrl": {
            "value": "[parameters('bigIpRuntimeInitPackageUrl')]"
          },
          "bigIpRuntimeInitConfig": {
            "value": "[parameters('bigIpRuntimeInitConfig')]"
          },
          "secretId": {
            "value": "[if(variables('createAccess'), reference('accessTemplate').outputs.secretId.value, '')]"
          },
          "sshKey": {
            "value": "[parameters('sshKey')]"
          },
          "tagValues": {
            "value": "[parameters('tagValues')]"
          },
          "uniqueString": {
            "value": "[variables('uniqueString')]"
          },
          "userAssignManagedIdentity": {
            "value": "[if(variables('createAccess'), reference('accessTemplate').outputs.userAssignedIdentityId.value, parameters('bigIpUserAssignManagedIdentity'))]"
          },
          "vmName": {
            "value": "[variables('vmName')]"
          },
          "zone": {
            "value": "[if(parameters('useAvailabilityZones'), '1', '')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "bigIpVmId": {
      "type": "string",
      "value": "[reference('bigIpTemplate').outputs.vmId.value]"
    },
    "bigIpManagementPublicIp": {
      "condition": "[parameters('provisionPublicIpMgmt')]",
      "type": "string",
      "value": "[reference('dagTemplate').outputs.mgmtIps.value[0]]"
    },
    "bigIpManagementPrivateIp": {
      "type": "string",
      "value": "[parameters('bigIpMgmtSelfAddress')]"
    },
    "bigIpManagementPublicUrl": {
      "condition": "[parameters('provisionPublicIpMgmt')]",
      "type": "string",
      "value": "[if(equals(parameters('numNics'), 1), concat('https://', reference('dagTemplate').outputs.mgmtIps.value[0], ':8443/'), concat('https://', reference('dagTemplate').outputs.mgmtIps.value[0], ':443/'))]"
    },
    "bigIpManagementPrivateUrl": {
      "type": "string",
      "value": "[if(equals(parameters('numNics'), 1), concat('https://', parameters('bigIpMgmtSelfAddress'), ':8443/'), concat('https://', parameters('bigIpMgmtSelfAddress'), ':443/'))]"
    },
    "bigIpSecretId": {
      "condition": "[variables('createAccess')]",
      "type": "string",
      "value": "[reference('accessTemplate').outputs.secretId.value]"
    },
    "wafPublicIps": {
      "condition": "[parameters('provisionServicePublicIp')]",
      "type": "array",
      "value": "[reference('dagTemplate').outputs.externalIps.value]"
    },
    "vip1PrivateIp": {
      "condition": "[variables('provisionServicePrivateIp')]",
      "type": "string",
      "value": "[parameters('servicePrivateIpAddress')]"
    },
    "vip1PublicIp": {
      "condition": "[parameters('provisionServicePublicIp')]",
      "type": "string",
      "value": "[reference('dagTemplate').outputs.externalIps.value[1]]"
    },
    "vip1PublicIpDns": {
      "condition": "[parameters('provisionServicePublicIp')]",
      "type": "string",
      "value": "[reference('dagTemplate').outputs.externalIpDns.value[1]]"
    },
    "vip1PrivateUrlHttp": {
      "condition": "[variables('provisionServicePrivateIp')]",
      "type": "string",
      "value": "[concat('http://', parameters('servicePrivateIpAddress'), '/')]"
    },
    "vip1PublicUrlHttp": {
      "condition": "[parameters('provisionServicePublicIp')]",
      "type": "string",
      "value": "[concat('http://', reference('dagTemplate').outputs.externalIps.value[1], '/')]"
    },
    "vip1PrivateUrlHttps": {
      "condition": "[variables('provisionServicePrivateIp')]",
      "type": "string",
      "value": "[concat('https://', parameters('servicePrivateIpAddress'), '/')]"
    },
    "vip1PublicUrlHttps": {
      "condition": "[parameters('provisionServicePublicIp')]",
      "type": "string",
      "value": "[concat('https://', reference('dagTemplate').outputs.externalIps.value[1], '/')]"
    }
  }
}
